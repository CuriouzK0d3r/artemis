apiVersion: {{ template "artemis.deployment.apiVersion" . }}
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}-database
{{ include "artemis.labels" . | indent 4 }}
  name: {{ .Release.Name }}-database
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-database
  replicas: {{ .Values.replicaCount | default 1 }}
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Release.Name }}-database
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      initContainers:
      - name: wait-for-rmq
        image: busybox
        command: ['sh', '-c', 'until nc -z {{ .Release.Name }}-{{ .Values.rabbitmqHost }}-svc {{ .Values.rabbitmqPort }}; do echo waiting for services; sleep 10; done;']
      - name: wait-for-redis
        image: busybox
        command: [ 'sh', '-c', 'until nc -z {{ .Release.Name }}-{{ .Values.redisHost }}-svc {{ .Values.redisPort }}; do echo waiting for services; sleep 10; done;' ]
      - name: wait-for-pg
        image: busybox
        command: [ 'sh', '-c', 'until nc -z {{ .Release.Name }}-{{ .Values.dbHost }}-svc {{ .Values.dbPort }}; do echo waiting for services; sleep 10; done;' ]
      - name: wait-for-hasura
        image: busybox
        command: [ 'sh', '-c', 'until nc -z {{ .Release.Name }}-{{ .Values.hasuraHost }}-svc {{ .Values.hasuraPort }}; do echo waiting for services; sleep 10; done;' ]
      - name: wait-for-notifier
        image: busybox
        command: [ 'sh', '-c', 'until nc -z {{ .Release.Name }}-notifier-svc {{ .Values.restPort }}; do echo waiting for services; sleep 10; done;' ]
      - name: wait-for-prefixtree
        image: busybox
        command: [ 'sh', '-c', 'until nc -z {{ .Release.Name }}-prefixtree-svc {{ .Values.restPort }}; do echo waiting for services; sleep 10; done;' ]
      containers:
      - env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: dbHost
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: dbName
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: dbPass
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: dbPort
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: dbUser
        - name: DB_VERSION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: dbVersion
        - name: HASURA_GRAPHQL_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: hasuraSecret
        - name: HASURA_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: hasuraHost
        - name: HASURA_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: hasuraPort
        - name: HISTORIC
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: historic
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: rabbitmqHost
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: rabbitmqPass
        - name: RABBITMQ_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: rabbitmqPort
        - name: RABBITMQ_USER
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: rabbitmqUser
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: redisHost
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: redisPort
        - name: REST_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: restPort
        - name: WITHDRAWN_HIJACK_THRESHOLD
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: withdrawnHijackThreshold
        image: inspiregroup/artemis-database:{{ .Values.systemVersion }}
        imagePullPolicy: Always
        name: database
        resources: {}
        volumeMounts:
        - mountPath: /etc/artemis/logging.yaml
          name: database-configmap
          subPath: logging.yaml
      restartPolicy: Always
      volumes:
      - configMap:
          name: {{ .Release.Name }}-volumes
        name: database-configmap
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | nindent 8 }}
      {{- end }}
