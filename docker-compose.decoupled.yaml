version: '3'
services:
    riperistap:
        image: artemis_riperistap
        build: ./monitor-services/riperistap
        container_name: riperistap
        restart: always
        depends_on:
            - rabbitmq
            - postgres
            - redis
            - database
            - configuration
            - prefixtree
        expose:
            - 3000
        ports:
            - "3001:3000"
        networks:
            - artemis
        environment:
            MON_TIMEOUT_LAST_BGP_UPDATE: ${MON_TIMEOUT_LAST_BGP_UPDATE}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            REDIS_HOST: ${REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
            REST_PORT: ${REST_PORT}
            RIS_ID: ${RIS_ID}
        volumes:
            - ./monitor-services/riperistap/configs/:/etc/artemis/
            - ./monitor-services/riperistap/entrypoint:/root/entrypoint
            - ./monitor-services/riperistap/core/ripe_ris.py:/root/core/ripe_ris.py
#    bgpstreamlivetap:
#        image: artemis_bgpstreamlivetap
#        build: ./monitor-services/bgpstreamlivetap
#        container_name: bgpstreamlivetap
#        restart: always
#        depends_on:
#            - rabbitmq
#            - postgres
#            - redis
#            - configuration
#            - prefixtree
#        expose:
#            - 3000
#        ports:
#            - "3002:3000"
#        networks:
#            - artemis
#        # TODO: env variables, ports
#        volumes:
#            - ./monitor-services/bgpstreamlivetap/configs/:/etc/artemis/
#    bgpstreamkafkatap:
#        image: artemis_bgpstreamkafkatap
#        build: ./monitor-services/bgpstreamkafkatap
#        container_name: bgpstreamkafkatap
#        restart: always
#        depends_on:
#            - rabbitmq
#            - postgres
#            - redis
#            - configuration
#            - prefixtree
#        expose:
#            - 3000
#        ports:
#            - "3003:3000"
#        networks:
#            - artemis
#        # TODO: env variables, ports
#        volumes:
#            - ./monitor-services/bgpstreamkafkatap/configs/:/etc/artemis/
#    bgpstreamhisttap:
#        image: artemis_bgpstreamhisttap
#        build: ./monitor-services/bgpstreamhisttap
#        container_name: bgpstreamhisttap
#        restart: always
#        depends_on:
#            - rabbitmq
#            - postgres
#            - redis
#            - configuration
#            - prefixtree
#        expose:
#            - 3000
#        ports:
#            - "3004:3000"
#        networks:
#            - artemis
#        # TODO: env variables, ports
#        volumes:
#            - ./monitor-services/bgpstreamhisttap/configs/:/etc/artemis/
#    exabgptap:
#        image: artemis_exabgptap
#        build: ./monitor-services/exabgptap
#        container_name: exabgptap
#        restart: always
#        depends_on:
#            - rabbitmq
#            - postgres
#            - redis
#            - configuration
#            - prefixtree
#        expose:
#            - 3000
#        ports:
#            - "3005:3000"
#        networks:
#            - artemis
#        # TODO: env variables, ports
#        volumes:
#            - ./monitor-services/exabgptap/configs/:/etc/artemis/
    configuration:
        image: artemis_configuration
        build: ./backend-services/configuration
        container_name: configuration
        restart: always
        depends_on:
            - rabbitmq
            - postgres
            - redis
            - graphql
            - database
            - fileobserver
        expose:
            - 3000
        ports:
            - "3006:3000"
        networks:
            - artemis
        environment:
            HASURA_HOST: ${HASURA_HOST}
            HASURA_PORT: ${HASURA_PORT}
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            REDIS_HOST: ${REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
            REST_PORT: ${REST_PORT}
        volumes:
            - ./backend-services/configuration/configs/:/etc/artemis/
            - ./backend-services/configuration/entrypoint:/root/entrypoint
            - ./backend-services/configuration/core/configuration.py:/root/core/configuration.py
    detection:
        image: artemis_detection
        build: ./backend-services/detection
        container_name: detection
        restart: always
        depends_on:
            - rabbitmq
            - postgres
            - redis
            - notifier
            - graphql
            - database
            - configuration
            - prefixtree
        expose:
            - 3000
        ports:
            - "3007:3000"
        networks:
            - artemis
        environment:
            HASURA_HOST: ${HASURA_HOST}
            HASURA_PORT: ${HASURA_PORT}
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            REDIS_HOST: ${REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
            REST_PORT: ${REST_PORT}
            RPKI_VALIDATOR_ENABLED: ${RPKI_VALIDATOR_ENABLED}
            RPKI_VALIDATOR_HOST: ${RPKI_VALIDATOR_HOST}
            RPKI_VALIDATOR_PORT: ${RPKI_VALIDATOR_PORT}
        volumes:
            - ./backend-services/detection/configs/:/etc/artemis/
            - ./backend-services/detection/entrypoint:/root/entrypoint
            - ./backend-services/detection/core/detection.py:/root/core/detection.py
#    mitigation:
#        image: artemis_mitigation
#        build: ./backend-services/mitigation
#        container_name: mitigation
#        restart: always
#        depends_on:
#            - rabbitmq
#            - postgres
#            - redis
#            - configuration
#            - detection
#            - prefixtree
#        expose:
#            - 3000
#        ports:
#            - "3008:3000"
#        networks:
#            - artemis
#        # TODO: env variables, ports
#        volumes:
#            - ./backend-services/mitigation/configs/:/etc/artemis/
    fileobserver:
        image: artemis_fileobserver
        build: ./backend-services/fileobserver
        container_name: fileobserver
        restart: always
        depends_on:
            - postgres
            - graphql
            - database
        expose:
            - 3000
        ports:
            - "3009:3000"
        networks:
            - artemis
        environment:
            HASURA_HOST: ${HASURA_HOST}
            HASURA_PORT: ${HASURA_PORT}
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
            REST_PORT: ${REST_PORT}
        volumes:
            - ./backend-services/configuration/configs/:/etc/artemis/
            - ./backend-services/fileobserver/entrypoint:/root/entrypoint
            - ./backend-services/fileobserver/core/observer.py:/root/core/observer.py
    notifier:
        image: artemis_notifier
        build: ./backend-services/notifier
        container_name: notifier
        restart: always
        depends_on:
            - rabbitmq
            - graphql
            - postgres
            - database
        expose:
            - 3000
        ports:
            - "3010:3000"
        networks:
            - artemis
        environment:
            HASURA_HOST: ${HASURA_HOST}
            HASURA_PORT: ${HASURA_PORT}
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
            HIJACK_LOG_FILTER: ${HIJACK_LOG_FILTER}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            REST_PORT: ${REST_PORT}
        volumes:
            - ./backend-services/notifier/configs/:/etc/artemis/
            - ./backend-services/notifier/entrypoint:/root/entrypoint
            - ./backend-services/notifier/core/notifier.py:/root/core/notifier.py
    database:
        image: artemis_database
        build: ./backend-services/database
        container_name: database
        restart: always
        depends_on:
            - rabbitmq
            - postgres
            - redis
            - graphql
        expose:
            - 3000
        ports:
            - "3011:3000"
        networks:
          - artemis
        environment:
            AUTO_RECOVER_PROCESS_STATE: ${AUTO_RECOVER_PROCESS_STATE}
            DB_USER: ${DB_USER}
            DB_PASS: ${DB_PASS}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_NAME: ${DB_NAME}
            DB_VERSION: ${DB_VERSION}
            HASURA_HOST: ${HASURA_HOST}
            HASURA_PORT: ${HASURA_PORT}
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
            HIJACK_LOG_FILTER: ${HIJACK_LOG_FILTER}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            REDIS_HOST: ${REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
            REST_PORT: ${REST_PORT}
            WITHDRAWN_HIJACK_THRESHOLD: ${WITHDRAWN_HIJACK_THRESHOLD}
            HISTORIC: ${HISTORIC}
        volumes:
            - ./backend-services/database/configs/:/etc/artemis/
            - ./backend-services/database/entrypoint:/root/entrypoint
            - ./backend-services/database/core/database.py:/root/core/database.py
    prefixtree:
        image: artemis_prefixtree
        build: ./backend-services/prefixtree
        container_name: prefixtree
        restart: always
        depends_on:
            - rabbitmq
            - configuration
            - graphql
            - database
        expose:
            - 3000
        ports:
            - "3012:3000"
        networks:
            - artemis
        environment:
            HASURA_HOST: ${HASURA_HOST}
            HASURA_PORT: ${HASURA_PORT}
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            REST_PORT: ${REST_PORT}
        volumes:
            - ./backend-services/prefixtree/configs/:/etc/artemis/
            - ./backend-services/prefixtree/entrypoint:/root/entrypoint
            - ./backend-services/prefixtree/core/prefixtree.py:/root/core/prefixtree.py
    redis:
        image: redis:latest
        container_name: redis
        restart: always
        networks:
            - artemis
        expose:
            - ${REDIS_PORT}
        volumes:
            - ./backend-services/redis/configs/redis.conf:/usr/local/etc/redis/redis.conf
#    frontend:
#        image: inspiregroup/artemis-frontend:${SYSTEM_VERSION}
#        container_name: frontend
#        restart: always
#        depends_on:
#            - rabbitmq
#            - postgres
#            - postgrest
#            - database
#            - monitor
#        networks:
#            - artemis
#        expose:
#            - ${WEBAPP_PORT}
#        environment:
#            ARTEMIS_WEB_HOST: ${ARTEMIS_WEB_HOST}
#            RABBITMQ_USER: ${RABBITMQ_USER}
#            RABBITMQ_PASS: ${RABBITMQ_PASS}
#            RABBITMQ_HOST: ${RABBITMQ_HOST}
#            RABBITMQ_PORT: ${RABBITMQ_PORT}
#            DB_HOST: ${DB_HOST}
#            DB_PORT: ${DB_PORT}
#            API_HOST: ${API_HOST}
#            API_PORT: ${API_PORT}
#            HASURA_HOST: ${HASURA_HOST}
#            HASURA_PORT: ${HASURA_PORT}
#            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
#            SYSTEM_VERSION: ${SYSTEM_VERSION}
#            BIND_IP: ${BIND_IP}
#            WEBAPP_PORT: ${WEBAPP_PORT}
#            USER_ROOT_USERNAME: ${ADMIN_USER}
#            USER_ROOT_PASSWORD: ${ADMIN_PASS}
#            USER_ROOT_EMAIL: ${ADMIN_EMAIL}
#            BACKEND_SUPERVISOR_HOST: ${BACKEND_SUPERVISOR_HOST}
#            BACKEND_SUPERVISOR_PORT: ${BACKEND_SUPERVISOR_PORT}
#            MON_SUPERVISOR_HOST: ${MON_SUPERVISOR_HOST}
#            MON_SUPERVISOR_PORT: ${MON_SUPERVISOR_PORT}
#            JWT_SECRET_KEY: ${JWT_SECRET_KEY}
#            FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
#            JS_VERSION: ${JS_VERSION}
#            SECURITY_PASSWORD_SALT: ${SECURITY_PASSWORD_SALT}
#            # for backwards compatibility
#            SUPERVISOR_HOST: ${BACKEND_SUPERVISOR_HOST}
#            SUPERVISOR_PORT: ${BACKEND_SUPERVISOR_PORT}
#            GUNICORN_WORKERS: ${GUNICORN_WORKERS:-4}
#        volumes:
#            # uncomment to run from source code  (only if you build from source)
#            # - ./frontend/:/root/
#            # comment after Step 2 of README
#            - ./frontend/webapp/configs/:/etc/artemis/
#            # uncomment after Step 2 of README
#            # - ./local_configs/frontend/:/etc/artemis/
#            - ./frontend/db/:/etc/webapp/db/
#    nginx:
#        image: nginx:1.17-alpine
#        container_name: nginx
#        restart: always
#        depends_on:
#            - frontend
#            - postgrest
#        networks:
#            - artemis
#        ports:
#            # uncomment both lines for rootless
#            # - "8080:8080"
#            # - "8443:8443"
#            # comment both lines when running rootless
#            - "80:80"
#            - "443:443"
#        volumes:
#            # comment after Step 2 of README
#            - ./frontend/webapp/configs/nginx.conf:/etc/nginx/nginx.conf
#            # uncomment after Step 2 of README
#            # - ./local_configs/frontend/nginx.conf:/etc/nginx/nginx.conf
#            # comment after Step 2 of README
#            - ./frontend/webapp/configs/certs/:/etc/nginx/certs/
#            # uncomment after Step 2 of README
#            # - ./local_configs/frontend/certs/:/etc/nginx/certs/
    rabbitmq:
        image: rabbitmq:3.8.3-management-alpine
        container_name: rabbitmq
        restart: always
        networks:
            - artemis
        expose:
            - ${RABBITMQ_PORT}
            # - 15672 management port
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
            RABBITMQ_IO_THREAD_POOL_SIZE: ${RABBITMQ_IO_THREAD_POOL_SIZE:-128}
        volumes:
            - ./other/rabbitmq/enabled-plugins:/etc/rabbitmq/enabled_plugins
    postgres:
        image: timescale/timescaledb:1.1.0-pg10
        container_name: postgres
        restart: always
        networks:
            - artemis
        expose:
            - ${DB_PORT}
        environment:
            POSTGRES_DB: ${DB_NAME}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASS}
            DB_BACKUP: ${DB_BACKUP}
            DB_AUTOCLEAN: ${DB_AUTOCLEAN}
            DB_HIJACK_DORMANT: ${DB_HIJACK_DORMANT}
        volumes:
            - ./postgres-data-current:/var/lib/postgresql/data
            - ./other/postgres-entrypoint.sh:/postgres-entrypoint.sh
            - ./postgres-data-backup/:/tmp/
            - ./other/db/init.sql:/docker-entrypoint-initdb.d/zinit.sql
            - ./other/db/data/:/docker-entrypoint-initdb.d/data/
            - ./other/db/libs/:/docker-entrypoint-initdb.d/libs/
        entrypoint: ["./postgres-entrypoint.sh"]
    postgrest:
        image: postgrest/postgrest:v7.0.0
        container_name: postgrest
        restart: always
        depends_on:
            - postgres
        networks:
            - artemis
        expose:
            - ${API_PORT}
        environment:
            PGRST_DB_URI: postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?application_name=postgrest
            PGRST_DB_SCHEMA: ${DB_SCHEMA}
            PGRST_DB_ANON_ROLE: ${DB_USER}
    pg-amqp-bridge:
        image: subzerocloud/pg-amqp-bridge:0.0.6
        container_name: pg-amqp-bridge
        restart: always
        depends_on:
            - database
            - postgres
            - rabbitmq
        networks:
            - artemis
        environment:
            - POSTGRESQL_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?application_name=pg-amqp-bridge
            - AMQP_URI=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@${RABBITMQ_HOST}:${RABBITMQ_PORT}//
            - BRIDGE_CHANNELS=events:amq.direct
            # - RUST_LOG=debug
            # - RUST_BACKTRACE=1
        volumes:
            - ./backend-services/database/wait-for:/root/wait-for
        command: ["/root/wait-for", "${RABBITMQ_HOST}:${RABBITMQ_PORT}", "-t", "0", "--", "pg-amqp-bridge"]
    graphql:
        image: hasura/graphql-engine:v1.1.0
        container_name: graphql
        restart: always
        depends_on:
            - postgres
        networks:
            - artemis
        expose:
            - ${HASURA_PORT}
        environment:
            HASURA_GRAPHQL_DATABASE_URL: postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?application_name=graphql
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
            HASURA_GRAPHQL_ENABLE_CONSOLE: ${HASURA_GUI}
            HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256", "key":"${JWT_SECRET_KEY}"}'
        command:
            - graphql-engine
            - serve

networks:
    artemis:
