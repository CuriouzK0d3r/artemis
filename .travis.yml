language: python
dist: xenial
os: linux
services:
  - docker
env:
  global:
    - BUILD_TAG=$(if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST_BRANCH"
      == "" ]; then echo "latest"; else echo dev-PR${TRAVIS_PULL_REQUEST}; fi)
    - IS_FORK=$(if [ "$TRAVIS_PULL_REQUEST_BRANCH" != "" ] && [ "$TRAVIS_PULL_REQUEST_SLUG" != "FORTH-ICS-INSPIRE/artemis" ]; then echo "fork"; fi)
branches:
  only:
    - master
jobs:
  include:
    - stage: checks
      name: PreCommitCheck
      install:
        - python -m pip install pre-commit pytest pytest-cov coverage==4.5.4 codecov==2.1.0
        - python -m pip install -r backend-services/detection/requirements.txt
        - pre-commit install
      script:
        - echo $TRAVIS_PULL_REQUEST_SLUG
        - SKIP=unittest pre-commit run --all-files
    - name: MigrationCheck
      install: []
      before_script:
        - docker-compose pull postgres
      script:
        - make migration-check
      after_success:
        - docker-compose logs postgres
      after_failure:
        - docker-compose logs postgres
    - stage: build and push containers
      name: riperistap
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
      - make riperistap
      - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-riperistap:${BUILD_TAG}; fi
    - name: bgpstreamlivetap
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make bgpstreamlivetap
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-bgpstreamlivetap:${BUILD_TAG}; fi
    - name: bgpstreamkafkatap
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make bgpstreamkafkatap
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-bgpstreamkafkatap:${BUILD_TAG}; fi
    - name: bgpstreamhisttap
      install: [ ]
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make bgpstreamhisttap
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-bgpstreamhisttap:${BUILD_TAG}; fi
    - name: exabgptap
      install: [ ]
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make exabgptap
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-exabgptap:${BUILD_TAG}; fi
    - name: autoignore
      install: [ ]
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make autoignore
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-autoignore:${BUILD_TAG}; fi
    - name: autostarter
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make autostarter
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-autostarter:${BUILD_TAG}; fi
    - name: configuration
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make configuration
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-configuration:${BUILD_TAG}; fi
    - name: detection
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make detection
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-detection:${BUILD_TAG}; fi
    - name: database
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make database
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-database:${BUILD_TAG}; fi
    - name: fileobserver
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make fileobserver
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-fileobserver:${BUILD_TAG}; fi
    - name: mitigation
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make mitigation
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-mitigation:${BUILD_TAG}; fi
    - name: notifier
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make notifier
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-notifier:${BUILD_TAG}; fi
    - name: prefixtree
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make prefixtree
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-prefixtree:${BUILD_TAG}; fi
    - name: frontend
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin; fi
      script:
        - make frontend
        - if [ ! $IS_FORK ]; then docker push inspiregroup/artemis-tempfrontend:${BUILD_TAG}; fi
    - stage: run tests
      name: TestDetection
      install:
        - if [ ! $IS_FORK ]; then pip install coverage==4.5.4 codecov==2.1.0; fi
      before_script:
        - if [ ! $IS_FORK ]; then make setup-dev; fi
        - docker build -t artemis_detection_testing testing/detection
        - docker-compose -f docker-compose.testdetection.yaml up -d
      script:
        - docker run --rm -ti --env-file .env --network artemis_artemis artemis_detection_testing
      after_success:
        - sh convert_coverage.sh
        - codecov
      after_failure:
        - docker-compose -f docker-compose.testdetection.yaml logs
    - name: TestAutoconf
      install:
        - if [ ! $IS_FORK ]; then pip install coverage==4.5.4 codecov==2.1.0; fi
      before_script:
        - if [ ! $IS_FORK ]; then make setup-dev; fi
        - docker build -t artemis_autoconf_testing testing/autoconf
        - docker-compose -f docker-compose.testautoconf.yaml up -d
      script:
        - docker run --rm -ti --env-file .env --network artemis_artemis artemis_autoconf_testing
      after_success:
        - sh convert_coverage.sh
        - codecov
      after_failure:
        - docker-compose -f docker-compose.testautoconf.yaml logs
    - name: Benchmark
      if: type == pull_request && fork = false
      install: []
      before_script:
        - if [ ! $IS_FORK ]; then make setup-dev; fi
        - docker build -t artemis_benchmark testing/benchmark
        - docker-compose -f docker-compose.benchmark.yaml up --scale detection=4 --scale prefixtree=4 --scale database=4 -d
      script:
        - docker run --rm -ti --env-file .env -e "REPO_SLUG=${TRAVIS_REPO_SLUG}" -e "GITHUB_TOKEN=${GITHUB_TOKEN}"
          -e "PULL_REQUEST_NUMBER=${TRAVIS_PULL_REQUEST}"  --network artemis_artemis artemis_benchmark
    - name: TestAutoignore
      install:
        - if [ ! $IS_FORK ]; then pip install coverage==4.5.4 codecov==2.1.0; fi
      before_script:
        - if [ ! $IS_FORK ]; then make setup-dev; fi
        - docker build -t artemis_autoignore_testing testing/autoignore
        - docker-compose -f docker-compose.testautoignore.yaml up -d
      script:
        - docker run --rm -ti --env-file .env --network artemis_artemis artemis_autoignore_testing
      after_success:
        - sh convert_coverage.sh
        - codecov
      after_failure:
        - docker-compose -f docker-compose.testautoignore.yaml logs
    - name: TestRPKI
      install:
        - if [ ! $IS_FORK ]; then pip install coverage==4.5.4 codecov==2.1.0; fi
      before_script:
        - if [ ! $IS_FORK ]; then make setup-dev; fi
        - make setup-routinator
        - docker build -t artemis_rpki_testing testing/rpki
        - docker run --rm -v $(pwd)/local_configs/routinator/tals:/home/routinator/.rpki-cache/tals nlnetlabs/routinator init -f --accept-arin-rpa
        - docker-compose -f docker-compose.testrpki.yaml -f docker-compose.routinator.yaml up -d
      script:
        - docker run --rm -ti --env-file .env --network artemis_artemis artemis_rpki_testing
      after_success:
        - sh convert_coverage.sh
        - codecov
      after_failure:
        - docker-compose -f docker-compose.testrpki.yaml logs

notifications:
  slack:
    secure: es0zP6IAgEJbdvJz8apGlQAO0SOnMMuQwTbItiXTUjA60Tfn2gcB7vk8n60Y/pEsLn9Z9Kk9WJp7/S9jZiKITpzLxSabo0+PF+DangvNUZMmJ9NV7oJOxGVQS94Ape2pHs6x4SUpP6JkadIU5ZxXbjVr8ZIPL2VfdclPlMBsM/K3ZNgd5cPLnPKsPuKn9WtTFDm/oGaWh/V6Y9T7/l/kNZrj6K7IcrI2rv4+LKLZDNicaQIN59M4Qt4niaETYNqZuqtWewHZH+KlXKzukFZ92qUDEG/3TBvqQDqimbjAXZkltso1MXBnSblrKNb1b00WysGwhT89zPeovhjcrHZB9vH9mKGNp5qoiBjVGzKYHLptitNqupP2ReUaRqKonRAw43iAN+8SSfrmCtyQGDv60fWLheUw+fbK8IRMrAYIG9t20/upDbrPTxU741Cqzgfy5fygnAuqmRi5AkckymJte5bf/SwQsmf5IFpc6FP6fcGZT6yL1zf55tsi8pXpq80SLokcH2bO17wEHSJxuNPOxNgJQjugY/VX58owZgHgYn1sLGpxrKlAwuQgs1+Av16TRGhCjyQPgWRN9inva/AwNEtA+ljp4PqzTk7oBI9MLaX3osU8Rm6bfMI2KNwcWpfcbztkYwZQLR4v45M91QnAE9UCbbkg4epgTli2RKnHCyQ=
